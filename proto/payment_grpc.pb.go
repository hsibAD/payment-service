// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: payment-service/proto/payment.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentService_InitiatePayment_FullMethodName          = "/payment.PaymentService/InitiatePayment"
	PaymentService_ProcessCreditCardPayment_FullMethodName = "/payment.PaymentService/ProcessCreditCardPayment"
	PaymentService_InitiateMetaMaskPayment_FullMethodName  = "/payment.PaymentService/InitiateMetaMaskPayment"
	PaymentService_ConfirmMetaMaskPayment_FullMethodName   = "/payment.PaymentService/ConfirmMetaMaskPayment"
	PaymentService_GetPayment_FullMethodName               = "/payment.PaymentService/GetPayment"
	PaymentService_GetPaymentsByOrder_FullMethodName       = "/payment.PaymentService/GetPaymentsByOrder"
	PaymentService_UpdatePaymentStatus_FullMethodName      = "/payment.PaymentService/UpdatePaymentStatus"
	PaymentService_GetPendingPayments_FullMethodName       = "/payment.PaymentService/GetPendingPayments"
	PaymentService_RetryPayment_FullMethodName             = "/payment.PaymentService/RetryPayment"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	// Payment Processing
	InitiatePayment(ctx context.Context, in *InitiatePaymentRequest, opts ...grpc.CallOption) (*Payment, error)
	ProcessCreditCardPayment(ctx context.Context, in *CreditCardPaymentRequest, opts ...grpc.CallOption) (*Payment, error)
	InitiateMetaMaskPayment(ctx context.Context, in *MetaMaskPaymentRequest, opts ...grpc.CallOption) (*MetaMaskPaymentResponse, error)
	ConfirmMetaMaskPayment(ctx context.Context, in *ConfirmMetaMaskPaymentRequest, opts ...grpc.CallOption) (*Payment, error)
	// Payment Status
	GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*Payment, error)
	GetPaymentsByOrder(ctx context.Context, in *GetPaymentsByOrderRequest, opts ...grpc.CallOption) (*GetPaymentsByOrderResponse, error)
	UpdatePaymentStatus(ctx context.Context, in *UpdatePaymentStatusRequest, opts ...grpc.CallOption) (*Payment, error)
	// Payment Recovery
	GetPendingPayments(ctx context.Context, in *GetPendingPaymentsRequest, opts ...grpc.CallOption) (*GetPendingPaymentsResponse, error)
	RetryPayment(ctx context.Context, in *RetryPaymentRequest, opts ...grpc.CallOption) (*Payment, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) InitiatePayment(ctx context.Context, in *InitiatePaymentRequest, opts ...grpc.CallOption) (*Payment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payment)
	err := c.cc.Invoke(ctx, PaymentService_InitiatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ProcessCreditCardPayment(ctx context.Context, in *CreditCardPaymentRequest, opts ...grpc.CallOption) (*Payment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payment)
	err := c.cc.Invoke(ctx, PaymentService_ProcessCreditCardPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) InitiateMetaMaskPayment(ctx context.Context, in *MetaMaskPaymentRequest, opts ...grpc.CallOption) (*MetaMaskPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetaMaskPaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_InitiateMetaMaskPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ConfirmMetaMaskPayment(ctx context.Context, in *ConfirmMetaMaskPaymentRequest, opts ...grpc.CallOption) (*Payment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payment)
	err := c.cc.Invoke(ctx, PaymentService_ConfirmMetaMaskPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*Payment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payment)
	err := c.cc.Invoke(ctx, PaymentService_GetPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentsByOrder(ctx context.Context, in *GetPaymentsByOrderRequest, opts ...grpc.CallOption) (*GetPaymentsByOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentsByOrderResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetPaymentsByOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdatePaymentStatus(ctx context.Context, in *UpdatePaymentStatusRequest, opts ...grpc.CallOption) (*Payment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payment)
	err := c.cc.Invoke(ctx, PaymentService_UpdatePaymentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPendingPayments(ctx context.Context, in *GetPendingPaymentsRequest, opts ...grpc.CallOption) (*GetPendingPaymentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPendingPaymentsResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetPendingPayments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RetryPayment(ctx context.Context, in *RetryPaymentRequest, opts ...grpc.CallOption) (*Payment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payment)
	err := c.cc.Invoke(ctx, PaymentService_RetryPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
type PaymentServiceServer interface {
	// Payment Processing
	InitiatePayment(context.Context, *InitiatePaymentRequest) (*Payment, error)
	ProcessCreditCardPayment(context.Context, *CreditCardPaymentRequest) (*Payment, error)
	InitiateMetaMaskPayment(context.Context, *MetaMaskPaymentRequest) (*MetaMaskPaymentResponse, error)
	ConfirmMetaMaskPayment(context.Context, *ConfirmMetaMaskPaymentRequest) (*Payment, error)
	// Payment Status
	GetPayment(context.Context, *GetPaymentRequest) (*Payment, error)
	GetPaymentsByOrder(context.Context, *GetPaymentsByOrderRequest) (*GetPaymentsByOrderResponse, error)
	UpdatePaymentStatus(context.Context, *UpdatePaymentStatusRequest) (*Payment, error)
	// Payment Recovery
	GetPendingPayments(context.Context, *GetPendingPaymentsRequest) (*GetPendingPaymentsResponse, error)
	RetryPayment(context.Context, *RetryPaymentRequest) (*Payment, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) InitiatePayment(context.Context, *InitiatePaymentRequest) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePayment not implemented")
}
func (UnimplementedPaymentServiceServer) ProcessCreditCardPayment(context.Context, *CreditCardPaymentRequest) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessCreditCardPayment not implemented")
}
func (UnimplementedPaymentServiceServer) InitiateMetaMaskPayment(context.Context, *MetaMaskPaymentRequest) (*MetaMaskPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateMetaMaskPayment not implemented")
}
func (UnimplementedPaymentServiceServer) ConfirmMetaMaskPayment(context.Context, *ConfirmMetaMaskPaymentRequest) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmMetaMaskPayment not implemented")
}
func (UnimplementedPaymentServiceServer) GetPayment(context.Context, *GetPaymentRequest) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}
func (UnimplementedPaymentServiceServer) GetPaymentsByOrder(context.Context, *GetPaymentsByOrderRequest) (*GetPaymentsByOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentsByOrder not implemented")
}
func (UnimplementedPaymentServiceServer) UpdatePaymentStatus(context.Context, *UpdatePaymentStatusRequest) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentStatus not implemented")
}
func (UnimplementedPaymentServiceServer) GetPendingPayments(context.Context, *GetPendingPaymentsRequest) (*GetPendingPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingPayments not implemented")
}
func (UnimplementedPaymentServiceServer) RetryPayment(context.Context, *RetryPaymentRequest) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryPayment not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_InitiatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).InitiatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_InitiatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).InitiatePayment(ctx, req.(*InitiatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ProcessCreditCardPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditCardPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ProcessCreditCardPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ProcessCreditCardPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ProcessCreditCardPayment(ctx, req.(*CreditCardPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_InitiateMetaMaskPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaMaskPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).InitiateMetaMaskPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_InitiateMetaMaskPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).InitiateMetaMaskPayment(ctx, req.(*MetaMaskPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ConfirmMetaMaskPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmMetaMaskPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ConfirmMetaMaskPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ConfirmMetaMaskPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ConfirmMetaMaskPayment(ctx, req.(*ConfirmMetaMaskPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPayment(ctx, req.(*GetPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentsByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentsByOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentsByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPaymentsByOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentsByOrder(ctx, req.(*GetPaymentsByOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdatePaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdatePaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_UpdatePaymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdatePaymentStatus(ctx, req.(*UpdatePaymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPendingPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPendingPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPendingPayments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPendingPayments(ctx, req.(*GetPendingPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RetryPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RetryPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_RetryPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RetryPayment(ctx, req.(*RetryPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiatePayment",
			Handler:    _PaymentService_InitiatePayment_Handler,
		},
		{
			MethodName: "ProcessCreditCardPayment",
			Handler:    _PaymentService_ProcessCreditCardPayment_Handler,
		},
		{
			MethodName: "InitiateMetaMaskPayment",
			Handler:    _PaymentService_InitiateMetaMaskPayment_Handler,
		},
		{
			MethodName: "ConfirmMetaMaskPayment",
			Handler:    _PaymentService_ConfirmMetaMaskPayment_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _PaymentService_GetPayment_Handler,
		},
		{
			MethodName: "GetPaymentsByOrder",
			Handler:    _PaymentService_GetPaymentsByOrder_Handler,
		},
		{
			MethodName: "UpdatePaymentStatus",
			Handler:    _PaymentService_UpdatePaymentStatus_Handler,
		},
		{
			MethodName: "GetPendingPayments",
			Handler:    _PaymentService_GetPendingPayments_Handler,
		},
		{
			MethodName: "RetryPayment",
			Handler:    _PaymentService_RetryPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment-service/proto/payment.proto",
}
